"0","# ---- Packages ----"
"0","# install.packages(c(""readr"",""dplyr"",""ggplot2""))  # if needed"
"0","library(readr)"
"0","library(dplyr)"
"0","library(ggplot2)"
"0","library(grid)  # for unit()"
"0",""
"0","# ---- Read CSV ----"
"0","# Required columns: Database, Search_Topic, Stage, Results"
"0","df <- read_csv(""search_results.csv"", show_col_types = FALSE) %>%"
"0","  mutate(Results = as.numeric(Results))"
"0",""
"0","# ---- Ordering ----"
"0","db_order    <- c(""ERIC"", ""PsychNet"")"
"0","stage_order <- c(""Initial"", ""HigherEd"", ""HigherEd+Online"")"
"0",""
"0","# Keep your exact topic strings; put ""frequency building"" first if present"
"0","topics <- unique(df$Search_Topic)"
"0","freq_idx <- which(grepl(""^\\s*frequency\\b"", topics, ignore.case = TRUE))"
"0","topic_order <- if (length(freq_idx) == 1) c(topics[freq_idx], topics[-freq_idx]) else topics"
"0",""
"0","df <- df %>%"
"0","  mutate("
"0","    Database     = factor(Database, levels = db_order),"
"0","    Search_Topic = factor(Search_Topic, levels = topic_order),"
"0","    Stage        = factor(Stage, levels = stage_order)"
"0","  )"
"0",""
"0","# ---- X positions (no mixing inside each database) ----"
"0","# [frequency building: Initial, HigherEd, HigherEd+Online] THEN"
"0","# [guided notes/ASR:   Initial, HigherEd, HigherEd+Online]"
"0","x_levels <- c("
"0","  paste(topic_order[1], stage_order, sep = "" • ""),"
"0","  paste(topic_order[2], stage_order, sep = "" • "")"
"0",")"
"0",""
"0","df <- df %>%"
"0","  mutate("
"0","    x_key = factor(paste(Search_Topic, Stage, sep = "" • ""), levels = x_levels)"
"0","  )"
"0",""
"0","# ---- University of Oregon colors ----"
"0","uo_green  <- ""#154733"""
"0","uo_yellow <- ""#FEE123"""
"0","topic_cols <- setNames(c(uo_green, uo_yellow)[seq_along(topic_order)], topic_order)"
"0",""
"0","# Legend labels use your exact query strings (in quotes)"
"0","legend_labels <- setNames("
"0","  c('(""frequency building"")',"
"0","    '(""guided notes"" OR ""active student responding"")')[seq_along(topic_order)],"
"0","  topic_order"
"0",")"
"0",""
"0","# ---- Base plot (serif ~ Times-like) ----"
"0","p <- ggplot(df, aes(x = x_key, y = Results, fill = Search_Topic)) +"
"0","  geom_col(width = 0.72) +"
"0","  geom_text(aes(label = Results),"
"0","            vjust = -0.35, size = 4, family = ""serif"") +"
"0","  facet_grid(. ~ Database, scales = ""free_y"", switch = ""x"") +"
"0","  scale_fill_manual(values = topic_cols, labels = legend_labels, name = NULL) +"
"0","  # hide per-bar labels; show only big ERIC/PsychNet strips"
"0","  scale_x_discrete(labels = rep("""", length(x_levels))) +"
"0","  labs("
"0","    y = ""Number of results"","
"0","    x = NULL"
"0","  ) +"
"0","  theme_minimal(base_family = ""serif"") +"
"0","  theme("
"0","    panel.grid.major.x = element_blank(),"
"0","    axis.text.x  = element_blank(),"
"0","    axis.ticks.x = element_blank(),"
"0","    strip.placement = ""outside"","
"0","    strip.background = element_rect(fill = NA, color = NA),"
"0","    strip.text.x.bottom = element_text(face = ""bold"", size = 12),"
"0","    legend.position = ""top"""
"0","  ) +"
"0","  coord_cartesian(clip = ""off"")"
"0",""
"0","# ---- Callouts (1,2,3) above BOTH topic groups in EACH database ----"
"0","anchors <- df %>%"
"0","  arrange(Database, Search_Topic, Stage) %>%"
"0","  group_by(Database, Search_Topic) %>%"
"0","  mutate(callout_num = c(""1"",""2"",""3"")) %>%"
"0","  ungroup()"
"0",""
"0","v_pad <- 0.06 * max(df$Results, na.rm = TRUE)"
"0",""
"0","p <- p +"
"0","  geom_label("
"0","    data = anchors,"
"0","    aes(x = x_key, y = Results + v_pad, label = callout_num),"
"0","    inherit.aes = FALSE,"
"0","    family = ""serif"","
"0","    size = 4,"
"0","    label.size = 0.6,"
"0","    label.padding = unit(0.12, ""lines""),"
"0","    fill = ""white"","
"0","    show.legend = FALSE"
"0","  )"
"0",""
"0","# ---- Text-only lines in legend for 1/2/3 (no shapes, no title) ----"
"0","# We add an invisible point layer to create a second legend, then hide its glyphs."
"0","legend_df <- data.frame("
"0","  Step = factor(c("
"0","    ""1: initial search terms"","
"0","    '2: AND (college OR university OR ""higher education"" OR undergraduate OR ""postsecondary education"")',"
"0","    '3: AND (""online"" or ""virtual"" or ""distance learning"")'"
"0","  ), levels = c("
"0","    ""1: initial search terms"","
"0","    '2: AND (college OR university OR ""higher education"" OR undergraduate OR ""postsecondary education"")',"
"0","    '3: AND (""online"" or ""virtual"" or ""distance learning"")'"
"0","  )),"
"0","  x_key = df$x_key[1],"
"0","  Results = min(df$Results, na.rm = TRUE) - 1  # off-plot"
"0",")"
"0",""
"0","p <- p +"
"0","  geom_point("
"0","    data = legend_df,"
"0","    aes(x = x_key, y = Results, shape = Step),"
"0","    inherit.aes = FALSE,"
"0","    alpha = 0"
"0","  ) +"
"0","  scale_shape_discrete(name = NULL) +"
"0","  guides("
"0","    fill  = guide_legend(order = 1),"
"0","    shape = guide_legend(order = 2, override.aes = list(shape = NA, alpha = 0, size = 0))"
"0","  )"
"0",""
"0","# ---- Print & Save ----"
"0","print(p)"
