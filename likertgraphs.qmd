---
title: "tryingsomething"
format: html
editor: visual
---

```{r}
suppressPackageStartupMessages({
  library(tidyverse)  
  library(scales)
})


dat_raw <- readr::read_csv(
  "feedback.csv",
  col_types = readr::cols(.default = readr::col_character())
)

dat <- dat_raw %>%
  filter(!if_any(everything(), ~ stringr::str_detect(coalesce(.x, ""), fixed('{"ImportId"'))))


present <- c(
  recorded_lessons_clarity = "How clear and understandable were the recorded lessons?",
  guided_notes_helpful     = "Did you find the guided notes helpful in following along with the recorded lessons?",
  recorded_prepared_quiz   = "Did the recorded lessons prepare you for the quiz content?",
  one_pager_useful         = "How useful was the One-Pager Review?",
  live_coaching_understand = "How effective was the live coaching in helping you understand the content?",
  live_coaching_fluency    = "How effective was the live coaching in helping you improve your fluency?",
  confidence_apply         = "How confident are you in applying what you learned from this workshop series?",
  used_pt_real_life        = "Have you used any of the Precision Teaching (PT) methods from this workshop in your real-life work?",
  likely_use_pt            = "How likely are you to use any of the Precision Teaching (PT) methods from this workshop in your current or future work?",
  overall_satisfaction     = "How satisfied were you with the workshop overall?",
  recommend_workshop       = "Would you recommend this workshop to others?"
)

pretty_label <- c(
  recorded_lessons_clarity = "Recorded lessons were clear",
  guided_notes_helpful     = "Guided notes were helpful",
  recorded_prepared_quiz   = "Recorded lessons prepared for quiz",
  one_pager_useful         = "One-Pager was useful",
  live_coaching_understand = "Live coaching improved understanding",
  live_coaching_fluency    = "Live coaching improved fluency",
  confidence_apply         = "Confident applying what was learned",
  used_pt_real_life        = "Used PT methods in real work",
  likely_use_pt            = "Likely to use PT",
  overall_satisfaction     = "Overall satisfaction",
  recommend_workshop       = "Recommend to others"
)


uo <- list(
  green_oregon     = "#154733",  # very positive
  green_dark       = "#006748",
  yellow_lightning = "#FEE123",
  gold_yellow      = "#FDD023",  # neutral
  black            = "#000000",
  gray_dark        = "#5E6A71",  # very negative
  gray_light       = "#D0D3D4"   # somewhat negative / (your request) somewhat positive
)

bucket_levels <- c("Very negative","Somewhat negative","Neutral","Somewhat positive","Very positive")

bucket_colors <- c(uo$gray_dark, uo$gray_light, uo$gold_yellow, uo$gray_light, uo$green_oregon)
names(bucket_colors) <- bucket_levels


theme_uo <- theme_minimal(base_size = 12, base_family = "Times New Roman") +
  theme(
    text               = element_text(family = "Times New Roman"),
    panel.grid.major.y = element_blank(),
    panel.grid.minor   = element_blank(),
    axis.text          = element_text(color = uo$gray_dark),
    axis.text.y        = element_text(color = uo$black),     # left axis in black
    axis.title         = element_text(color = uo$gray_dark),
    plot.title         = element_text(face = "bold", size = 14, margin = margin(b = 6), color = uo$black),
    plot.caption       = element_text(size = 9, color = uo$gray_dark),
    legend.position    = "bottom",
    legend.box         = "vertical",
    legend.title       = element_text(face = "bold", color = uo$black)
  )


clean_ans <- function(x) {
  x %>%
    stringr::str_trim() %>%
    stringr::str_replace("^\\s*\\d+\\s*[-â€“:]\\s*", "") %>%   # drop "4 - "
    stringr::str_replace("\\s*\\(?\\d+\\)?\\s*$", "") %>%    # drop "(4)" / trailing numbers
    stringr::str_squish()
}
lc <- function(x) stringr::str_to_lower(x)


map_bucket <- function(ans) {
  a <- lc(ans)

  very_neg <- c(
    "extremely unclear", "not effective at all", "not at all useful", "not at all helpful",
    "not at all confident", "not likely", "^no$", "^not at all$", "extremely dissatisfied"
  )
  some_neg <- c(
    "somewhat unclear", "slightly effective", "slightly useful", "slightly helpful",
    "^rarely$", "somewhat dissatisfied"
  )
  neutral <- c(
    "neither clear nor unclear", "moderately effective", "moderately useful", "moderately helpful",
    "^neutral$", "^somewhat$", "neither satisfied nor dissatisfied", "^maybe$"
  )
  some_pos <- c(
    "somewhat clear", "very effective", "very useful", "very helpful",
    "somewhat confident", "^likely$", "somewhat satisfied"
  )
  very_pos <- c(
    "extremely clear", "extremely effective", "extremely useful", "extremely helpful",
    "very confident", "very likely", "^yes$", "extremely satisfied"
  )

  case_when(
    stringr::str_detect(a, paste(very_neg, collapse = "|")) ~ "Very negative",
    stringr::str_detect(a, paste(some_neg, collapse = "|")) ~ "Somewhat negative",
    stringr::str_detect(a, paste(neutral,  collapse = "|")) ~ "Neutral",
    stringr::str_detect(a, paste(some_pos, collapse = "|")) ~ "Somewhat positive",
    stringr::str_detect(a, paste(very_pos, collapse = "|")) ~ "Very positive",
    TRUE ~ NA_character_   
  )
}


panel_df <- function(items) {
  items <- items[items %in% names(present)]
  out <- list()

  for (s in items) {
    col <- present[[s]]
    if (!col %in% names(dat)) next

    raw <- dat[[col]] |> clean_ans()
    raw[raw == ""] <- NA_character_
    raw <- raw[!is.na(raw)]
    if (!length(raw)) next

    bucket <- map_chr(raw, map_bucket)
    bucket <- factor(bucket, levels = bucket_levels)
    bucket <- droplevels(bucket)
    bucket <- bucket[!is.na(bucket)]
    if (!length(bucket)) next

    tab <- as.data.frame(
      table(item = rep(pretty_label[[s]], length(bucket)),
            bucket = bucket,
            useNA = "no"),
      stringsAsFactors = FALSE
    )
    total <- sum(tab$Freq)
    tab$pct <- if (total == 0) 0 else tab$Freq / total

    out[[length(out) + 1]] <- tab[, c("item","bucket","pct")]
  }

  if (!length(out)) tibble(item = character(), bucket = factor(levels = bucket_levels), pct = double())
  else bind_rows(out)
}


plot_panel <- function(df, title) {
  if (nrow(df) == 0) {
    message("No data found for: ", title)
    return(ggplot() + labs(title = title, caption = "No responses found.") + theme_void())
  }

  used_levels <- df %>% distinct(bucket) %>% pull(bucket) %>% as.character()
  used_levels <- bucket_levels[bucket_levels %in% used_levels]
  pal <- bucket_colors[used_levels]

  df$bucket <- factor(as.character(df$bucket), levels = used_levels)

  ggplot(df, aes(x = factor(item, levels = rev(unique(item))), y = pct, fill = bucket)) +
    geom_col(width = 0.75, color = uo$gray_dark, linewidth = 0.25) +
    coord_flip() +
    scale_y_continuous(labels = percent_format(accuracy = 1), expand = c(0, 0), limits = c(0, 1)) +
    scale_fill_manual(values = pal, drop = TRUE, name = "Response") +
    labs(
      title = title, x = NULL, y = NULL,
      caption = "Each bar shows the response distribution for one item (100% stacked)."
    ) +
    theme_uo
}


instructional_items <- c(
  "recorded_lessons_clarity",
  "guided_notes_helpful",
  "recorded_prepared_quiz",
  "one_pager_useful",
  "live_coaching_understand",
  "live_coaching_fluency"
)
impact_items <- c(
  "confidence_apply",
  "used_pt_real_life",
  "likely_use_pt",
  "overall_satisfaction",
  "recommend_workshop"
)


df_instructional <- panel_df(instructional_items)
df_impact        <- panel_df(impact_items)

p_instructional <- plot_panel(df_instructional, "Instructional Components")
p_impact        <- plot_panel(df_impact,        "Impact")

print(p_instructional)
print(p_impact)
```
